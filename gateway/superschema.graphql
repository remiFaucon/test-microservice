schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  AUTH @join__graph(name: "auth", url: "http://auth/query")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Login
  @join__type(graph: AUTH)
{
  user: User!
  uuid: String
}

type LoginResponse
  @join__type(graph: AUTH)
{
  uuid: String!
}

type Mutation
  @join__type(graph: AUTH)
{
  register(user: UserInput!): RegisteredResponse @join__field(graph: AUTH)
  login(user: UserInput!): LoginResponse @join__field(graph: AUTH)
}

type Query
  @join__type(graph: AUTH)
{
  user(email: String!, password: Int): User @join__field(graph: AUTH)
  loginUser(uuid: String!): Login @join__field(graph: AUTH)
}

type RegisteredResponse
  @join__type(graph: AUTH)
{
  status: String!
}

type User
  @join__type(graph: AUTH)
{
  name: String!
  email: String!
  password: String!
}

input UserInput
  @join__type(graph: AUTH)
{
  name: String!
  email: String!
  password: String!
}